package nextcrowd.crowdfunding.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CrowdfundingProjectOwnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectOwnerAllPropertiesEquals(
        CrowdfundingProjectOwner expected,
        CrowdfundingProjectOwner actual
    ) {
        assertCrowdfundingProjectOwnerAutoGeneratedPropertiesEquals(expected, actual);
        assertCrowdfundingProjectOwnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectOwnerAllUpdatablePropertiesEquals(
        CrowdfundingProjectOwner expected,
        CrowdfundingProjectOwner actual
    ) {
        assertCrowdfundingProjectOwnerUpdatableFieldsEquals(expected, actual);
        assertCrowdfundingProjectOwnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectOwnerAutoGeneratedPropertiesEquals(
        CrowdfundingProjectOwner expected,
        CrowdfundingProjectOwner actual
    ) {
        assertThat(expected)
            .as("Verify CrowdfundingProjectOwner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectOwnerUpdatableFieldsEquals(
        CrowdfundingProjectOwner expected,
        CrowdfundingProjectOwner actual
    ) {
        assertThat(expected)
            .as("Verify CrowdfundingProjectOwner relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectOwnerUpdatableRelationshipsEquals(
        CrowdfundingProjectOwner expected,
        CrowdfundingProjectOwner actual
    ) {
        // empty method
    }
}
