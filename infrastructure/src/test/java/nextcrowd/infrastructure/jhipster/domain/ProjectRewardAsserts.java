package nextcrowd.infrastructure.jhipster.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectRewardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRewardAllPropertiesEquals(ProjectReward expected, ProjectReward actual) {
        assertProjectRewardAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectRewardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRewardAllUpdatablePropertiesEquals(ProjectReward expected, ProjectReward actual) {
        assertProjectRewardUpdatableFieldsEquals(expected, actual);
        assertProjectRewardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRewardAutoGeneratedPropertiesEquals(ProjectReward expected, ProjectReward actual) {
        assertThat(expected)
            .as("Verify ProjectReward auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRewardUpdatableFieldsEquals(ProjectReward expected, ProjectReward actual) {
        assertThat(expected)
            .as("Verify ProjectReward relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRewardUpdatableRelationshipsEquals(ProjectReward expected, ProjectReward actual) {
        assertThat(expected)
            .as("Verify ProjectReward relationships")
            .satisfies(e ->
                assertThat(e.getCrowdfundingProject()).as("check crowdfundingProject").isEqualTo(actual.getCrowdfundingProject())
            );
    }
}
