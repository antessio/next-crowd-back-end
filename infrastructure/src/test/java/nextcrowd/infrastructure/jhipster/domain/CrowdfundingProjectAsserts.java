package nextcrowd.infrastructure.jhipster.domain;

import static nextcrowd.infrastructure.jhipster.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CrowdfundingProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectAllPropertiesEquals(CrowdfundingProject expected, CrowdfundingProject actual) {
        assertCrowdfundingProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertCrowdfundingProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectAllUpdatablePropertiesEquals(CrowdfundingProject expected, CrowdfundingProject actual) {
        assertCrowdfundingProjectUpdatableFieldsEquals(expected, actual);
        assertCrowdfundingProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectAutoGeneratedPropertiesEquals(CrowdfundingProject expected, CrowdfundingProject actual) {
        assertThat(expected)
            .as("Verify CrowdfundingProject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectUpdatableFieldsEquals(CrowdfundingProject expected, CrowdfundingProject actual) {
        assertThat(expected)
            .as("Verify CrowdfundingProject relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e ->
                assertThat(e.getRequestedAmount())
                    .as("check requestedAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getRequestedAmount())
            )
            .satisfies(e ->
                assertThat(e.getCollectedAmount())
                    .as("check collectedAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCollectedAmount())
            )
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getProjectStartDate()).as("check projectStartDate").isEqualTo(actual.getProjectStartDate()))
            .satisfies(e -> assertThat(e.getProjectEndDate()).as("check projectEndDate").isEqualTo(actual.getProjectEndDate()))
            .satisfies(e -> assertThat(e.getNumberOfBackers()).as("check numberOfBackers").isEqualTo(actual.getNumberOfBackers()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLongDescription()).as("check longDescription").isEqualTo(actual.getLongDescription()))
            .satisfies(e -> assertThat(e.getProjectVideoUrl()).as("check projectVideoUrl").isEqualTo(actual.getProjectVideoUrl()))
            .satisfies(e -> assertThat(e.getRisk()).as("check risk").isEqualTo(actual.getRisk()))
            .satisfies(e ->
                assertThat(e.getExpectedProfit())
                    .as("check expectedProfit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExpectedProfit())
            )
            .satisfies(e ->
                assertThat(e.getMinimumInvestment())
                    .as("check minimumInvestment")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMinimumInvestment())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrowdfundingProjectUpdatableRelationshipsEquals(CrowdfundingProject expected, CrowdfundingProject actual) {
        assertThat(expected)
            .as("Verify CrowdfundingProject relationships")
            .satisfies(e -> assertThat(e.getOwner()).as("check owner").isEqualTo(actual.getOwner()));
    }
}
