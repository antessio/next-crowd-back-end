package nextcrowd.infrastructure.jhipster.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectOwnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectOwnerAllPropertiesEquals(ProjectOwner expected, ProjectOwner actual) {
        assertProjectOwnerAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectOwnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectOwnerAllUpdatablePropertiesEquals(ProjectOwner expected, ProjectOwner actual) {
        assertProjectOwnerUpdatableFieldsEquals(expected, actual);
        assertProjectOwnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectOwnerAutoGeneratedPropertiesEquals(ProjectOwner expected, ProjectOwner actual) {
        assertThat(expected)
            .as("Verify ProjectOwner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectOwnerUpdatableFieldsEquals(ProjectOwner expected, ProjectOwner actual) {
        assertThat(expected)
            .as("Verify ProjectOwner relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectOwnerUpdatableRelationshipsEquals(ProjectOwner expected, ProjectOwner actual) {
        // empty method
    }
}
